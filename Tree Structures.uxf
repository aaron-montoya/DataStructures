<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>30</x>
      <y>40</y>
      <w>250</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>bg=#BA53
Node&lt;Type&gt;
--

#data : Type

--
+Node() : constructor
+Node(Type data) : constructor
+getData() : Type
+SetData(Type data) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>400</x>
      <y>40</y>
      <w>350</w>
      <h>280</h>
    </coordinates>
    <panel_attributes>bg=#AAAAD
BinaryTreeNode&lt;Type&gt;
--

-root : BinaryTreeNode&lt;Type&gt; *
-left : BinaryTreeNode&lt;Type&gt; *
-right : BinaryTreeNode&lt;Type&gt; *

--
+BinaryTreeNode() : constructor
+BinaryTreeNode(Type data) : constructor

+getRoot() : BinaryTreeNode&lt;Type&gt; *
+getLeft() : BinaryTreeNode&lt;Type&gt; *
+getRight() : BinaryTreeNode&lt;Type&gt; *

+setRootNode(BinaryTreeNode&lt;Type&gt; *) : void
+setLeftNode(BinaryTreeNode&lt;Type&gt; *) : void
+setRightNode(BinaryTreeNode&lt;Type&gt; *) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>270</x>
      <y>150</y>
      <w>150</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Extends
lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;20.0;130.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>30</x>
      <y>260</y>
      <w>310</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>bg=#BA5209
Tree&lt;Type&gt;
--

#root : BinaryTreeNode&lt;Type&gt;

--
*Informational Methods*
/+getSize() : int/
/+getHeight() : int/
/+isComplete() : bool/
/+isBalanced() : bool/

*Data Methods*
/+insert(Type) : void/
/+contains(Type) : bool/
/+remove(Type) : void/

*Traversals*
/+inOrderTraversal() : void/
/+preOrderTraversal() : void/
/+postOrderTraversal() : void/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>400</x>
      <y>370</y>
      <w>590</w>
      <h>600</h>
    </coordinates>
    <panel_attributes>bg=48
BinarySearchTree&lt;Type&gt;
--
*Structure*
+ BinarySearchTree() : Constructor
+ ~BinarySearchTree() : Destructor

*Informational Methods*
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool

*Recursive Information Helpers*
# calculateSize(BinaryTreeNode&lt;Type&gt; * startNode) : int
# calculateHeight(BinaryTreeNode&lt;Type&gt; * startNode) : int
# isBalanced(BinaryTreeNode&lt;Type&gt; * startNode) : bool
# isComplete(BinaryTreeNode&lt;Type&gt; * startNode, int index, int size) : bool

*Data Methods*
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void

*Recursive Data Helpers*
# removeNode(BinaryTreeNode&lt;Type&gt; * removeMe) : void

*Traversals*
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void

*Recursive Traversal Helpers*
# inOrderTraversal(BinaryTreeNode&lt;Type&gt; * inStart) : void
# preOrderTraversal(BinaryTreeNode&lt;Type&gt; * preStart) : void
# postOrderTraversal(BinaryTreeNode&lt;Type&gt; * postStart) : void
# getRightMostChild(BinaryTreeNode&lt;Type&gt; * current) : BinaryTreeNode&lt;Type&gt; *
# getLeftMostChild(BinaryTreeNode&lt;Type&gt; * current) : BinaryTreeNode&lt;Type&gt; *</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
