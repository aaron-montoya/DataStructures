<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <help_text>//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Cmd to select multiple elements
// Use Cmd+mouse to select via lasso
//
// Use +/- or Cmd+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Cmd+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>40</x>
      <y>40</y>
      <w>730</w>
      <h>640</h>
    </coordinates>
    <panel_attributes>SimpleClassNonLinear :: Graph
--
- Maximum : int
- adjacencyMatrix : bool [][]
- weightCostMatrix : int [][]
graphData : Type []
- vertexCount : int
--
Graph() : constructor

+ addVertex(const Type&amp; value) : void

*Connect vertices*
+ addEdge(int source, int target);
+ addEdgeUndirected(int source, int target) : void
+ addEdgeCost(int source, int target, int cost) : void

*Disconnect vertices*
+ removeEdge(int source, int target) : void
+ removeEdgeUndirected(int source, int target) : void
+ removeEdgeCost(int source, int target) : void

*Accessors*
+ operator [] (int vertext) : Type &amp;
+ operator [] (int vertext) : Type const
+ size() const : int

*Check connection*
+ hasUndirectedConnection(int source, int target) : const bol
+ areConnected(int source, int target) : const booll
+ neighbors(int vertex) : const std::set&lt;int&gt;

*Traversals*
+ depthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertext) : void
+ breadthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
+ costTraversal(Graph&lt;Type&gt; &amp; graph, int vertext) : void
- depthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex, bool markedVertices[]) : void</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
